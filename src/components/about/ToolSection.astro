---
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

import { Svg } from 'astro-pure/user'
import { cn } from 'astro-pure/utils'

interface Props {
  class?: string
  title: string
  tools: {
    name: string
    description: string
    href: string
    icon: Promise<unknown> | unknown
    darkIcon?: Promise<unknown> | unknown
  }[]
}

const { class: className, title, tools, ...props } = Astro.props

// Función para determinar si es una importación SVG
function isSvgImport(icon: Promise<unknown> | unknown): icon is Promise<typeof import('*.svg?raw')> {
  return icon instanceof Promise
}

// Función auxiliar para resolver solo iconos WebP/Image (no SVG)
async function resolveImageIcon(iconPromise: Promise<unknown> | unknown): Promise<ImageMetadata | null> {
  if (!iconPromise || !(iconPromise instanceof Promise)) return null
  
  try {
    const resolved = await iconPromise
    const content = (resolved as { default?: unknown }).default || resolved
    
    // Si es ImageMetadata, lo devolvemos
    if (content && typeof content === 'object' && 'src' in content && 'width' in content && 'height' in content) {
      return content as ImageMetadata
    }
  } catch {
    // Si falla la resolución, probablemente es un SVG ?raw que no debería resolverse aquí
  }
  
  return null
}

// Pre-resolver solo los iconos de imagen (WebP), mantener SVG como Promise
const resolvedTools = await Promise.all(
  tools.map(async (tool) => ({
    ...tool,
    resolvedImageIcon: await resolveImageIcon(tool.icon),
    resolvedDarkImageIcon: tool.darkIcon ? await resolveImageIcon(tool.darkIcon) : null,
    isSvgIcon: isSvgImport(tool.icon),
    isDarkSvgIcon: tool.darkIcon ? isSvgImport(tool.darkIcon) : false
  }))
)
---

<div
  class={cn('not-prose flex flex-col rounded-xl border py-3 px-3 gap-y-3 sm:gap-y-4', className)}
  {...props}
>
  <div class='m-0 px-2 text-lg font-medium'>{title}</div>
  <div class='grid grid-cols-1 gap-x-2 gap-y-2 sm:grid-cols-2'>
    {
      resolvedTools.map((tool) => (
        <a
          class='group relative text-sm leading-normal no-underline'
          href={tool.href}
          id={tool.name}
          target='_blank'
        >
          <div class='flex items-center gap-x-3 rounded-lg border border-transparent px-1.5 py-1 transition-colors hover:border-border hover:bg-muted'>
            {tool.resolvedDarkImageIcon || tool.isDarkSvgIcon ? (
              <>
                {tool.resolvedImageIcon ? (
                  <div class='size-10 rounded-lg bg-primary-foreground p-2 dark:hidden'>
                    <Image src={tool.resolvedImageIcon} alt={tool.name} class='h-full w-full object-contain' />
                  </div>
                ) : tool.isSvgIcon ? (
                  <Svg
                    src={tool.icon as Promise<typeof import('*.svg?raw')>}
                    class='size-10 rounded-lg bg-primary-foreground fill-foreground p-2 dark:hidden'
                  />
                ) : null}

                {tool.resolvedDarkImageIcon ? (
                  <div class='size-10 rounded-lg bg-primary-foreground p-2 hidden dark:block'>
                    <Image
                      src={tool.resolvedDarkImageIcon}
                      alt={tool.name}
                      class='h-full w-full object-contain'
                    />
                  </div>
                ) : tool.isDarkSvgIcon ? (
                  <Svg
                    src={tool.darkIcon as Promise<typeof import('*.svg?raw')>}
                    class='size-10 rounded-lg bg-primary-foreground fill-foreground p-2 hidden dark:block'
                  />
                ) : null}
              </>
            ) : (
              <>
                {tool.resolvedImageIcon ? (
                  <div class='size-10 rounded-lg bg-primary-foreground p-2'>
                    <Image src={tool.resolvedImageIcon} alt={tool.name} class='h-full w-full object-contain' />
                  </div>
                ) : tool.isSvgIcon ? (
                  <Svg
                    src={tool.icon as Promise<typeof import('*.svg?raw')>}
                    class='size-10 rounded-lg bg-primary-foreground fill-foreground p-2'
                  />
                ) : null}
              </>
            )}
            <div class='z-20 flex flex-col'>
              <div class='font-medium text-foreground'>{tool.name}</div>
              <div class='font-normal'>{tool.description}</div>
            </div>
          </div>
        </a>
      ))
    }
  </div>
</div>
